[{"title":"使用mongoDB（三）——聚合","date":"2017-08-31T03:25:21.000Z","path":"2017/08/31/使用mongoDB（三）——聚合/","text":"这里我遇到一个问题：想要统计某一个人在某天一共发了多少个帖子。师兄让我研究一下聚合，我发现这个确实节约了不少时间~用mongo的聚合，我可以轻松聚合出一个人在同一天发了多少帖子∠( ᐛ 」∠)＿ 管道概念管道是由一个个功能节点组成的。聚合管道以一个集合中的所有文档作为开始，然后这些文档从一个操作节点流向下一个节点，每个操作节点对文档做相应的操作。这些操作可能会创建新的文档或者过滤掉一些不符合条件的文档，在管道中可以对文档进行重复操作。 管道基本的功能一是对文档进行“过滤”，也就是筛选出符合条件的文档;二是对文档进行“变换”，也就是改变文档的输出形式。 管道操作符管道操作符的种类：| Name | Description || —————– |:——————— || $project | 重塑一个文档流。$project可以重命名、添加或删除字段，以及创建计算的值和子文档|| $match | 过滤文档流，只允许匹配的文档传递到下一个管道阶段。$match使用标准的MongoDB查询。 || $skip | 从管道中跳过指定数量的文档并返回其余的文档|| $group | 将文档组合在一起，用于计算基于文档集合的聚合值|| $sort | 获取所有输入文档并将它们返回到已排序的文档流中| 管道操作符详细使用说明1. $project数据投影，主要用于重命名、增加和删除字段例如：123456db.article.aggregate(&#123; $project : &#123;title : 1 ,author : 1 ,&#125;&#125;); 这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以加上:: 0 ,```123除此之外使用$project还可以重命名字段名和子文档的字段名: db.article.aggregate({ $project : {title : 1 ,stats : {pv : “$pageViews”,foo : “$other.foo”,dpv : { $add:[“$pageViews”, 10] } #产生了一个子文档stats,里面包含pv,foo,dpv三个字段。}}});1234#### 2.$match&lt;b&gt;滤波操作，筛选符合条件文档，作为下一阶段的输入&lt;/b&gt; 例如： db.articles.aggregate( [{ $match : { score : { $gt : 70, $lte : 90 } } },{ $group: { _id: null, count: { $sum: 1 } } }] );12345678910&gt;注意： 1.不能在$match操作符中使用$where表达式操作符。 2.$match尽量出现在管道的前面，这样可以提早过滤文档，加快聚合速度。#### 3. $limit&lt;b&gt;限制经过管道的文档数量&lt;/b&gt; &gt;$limit的参数只能是一个正整数 例如： db.article.aggregate({ $limit : 5 });123456#### 4. $skip&lt;b&gt;从待操作集合开始的位置跳过文档的数目&lt;/b&gt; &gt;$skip的参数只能是一个正整数 例如： db.article.aggregate({ $skip : 5 });12345#### 5. $group&lt;b&gt;对数据进行分组&lt;/b&gt; 例如： db.article.aggregate({ $group : {_id : “$author”,docsPerAuthor : { $sum : 1 },viewsPerAuthor : { $sum : “$pageViews” }}});12345678&gt;注意： 1.$group的输出是无序的。 2.$group操作目前是在内存中进行的，所以不能用它来对大量个数的文档进行分组。#### 6. $sort&lt;b&gt;对文档按照指定字段排序&lt;/b&gt; 例如： db.users.aggregate( { $sort : { age : -1, posts: 1 } });12345678910111213141516171819202122232425262728293031323334&gt;注意： 1.如果将$sort放到管道前面的话可以利用索引，提高效率## 日期类型聚合操作符#### 1.ISODate$dayOfYear: 返回该日期是这一年的第几天。（全年366天） $dayOfMonth: 返回该日期是这一个月的第几天。（1到31） $dayOfWeek: 返回的是这个周的星期几。（1：星期日，7：星期六） $year: 返回该日期的年份部分 $month： 返回该日期的月份部分（between 1 and 12.） $week： 返回该日期是所在年的第几个星期（between 0 and 53） $hour： 返回该日期的小时部分 $minute: 返回该日期的分钟部分 $second: 返回该日期的秒部分（以0到59之间的数字形式返回日期的第二部分，但可以是60来计算闰秒。） $millisecond：返回该日期的毫秒部分（between 0 and 999.） $dateToString： &#123; $dateToString: &#123; format: &lt;formatString&gt;, date: &lt;dateExpression&gt; &#125; &#125; %Y Year (4 digits, zero padded) 0000-9999 %m Month (2 digits, zero padded) 01-12 %d Day of Month (2 digits, zero padded) 01-31 %H Hour (2 digits, zero padded, 24-hour clock) 00-23 %M Minute (2 digits, zero padded) 00-59 %S Second (2 digits, zero padded) 00-60 %L Millisecond (3 digits, zero padded) 000-999 %j Day of year (3 digits, zero padded) 001-366 %w Day of week (1-Sunday, 7-Saturday) 1-7 %U Week of year (2 digits, zero padded) 00-53 &gt; &lt;b&gt;举个栗子&lt;/b&gt;我们有如下的集合： { “_id” : 1, “item” : “abc”, “price” : 10, “quantity” : 2, “date” : ISODate(“2014-01-01T08:15:39.736Z”)}12下面的聚合使用$dateToString返回日期字段作为格式化的字符串: db.sales.aggregate( [ { $project: { yearMonthDay: { $dateToString: { format: “%Y-%m-%d”, date: “$date” } }, time: { $dateToString: { format: “%H:%M:%S:%L”, date: “$date” } } } } ])12&gt; &lt;b&gt; 再来一个聚合栗子 &lt;/b&gt;： db.getCollection(‘facebook_content_info’).aggregate([{ $match : {‘user_name’ :’王大陸’}},{ $project : {date: { $dateToString: { format: “%Y-%m-%d”, date: “$created_time” } }}},{ $group: { _id: ‘$date’, count: { $sum: 1 } } }, {$sort:{_id:1}}]);12345#### 2.string 的date直接用substr切分&gt; &lt;b&gt; 聚合栗子 &lt;/b&gt;： db.getCollection(‘case’).aggregate([{ $match : { $and: [{‘case_basic.time’ : { $gt : ‘2017-06-23 9:32:44’ }},{‘case_basic.case_status’ :’已归档’}]}},{ $project : { ‘date’ : {‘$substr’:[“$case_basic.time”,0,10]}}} ,{ $group: { _id: ‘$date’, count: { $sum: 1 } } },{ $project : { ‘_id’ : ‘1’, ‘total’: ‘$count’}} ,{ $group: { _id: ‘$_id’, count: { $sum: ‘$total’ } } },]);``` 其他管道操作符在match中，我们可能联合算数类型操作符“$and”比较类型操作符“$gt,$lt,$gte,$lte” 在进行比较复杂的聚合操作时，可以先在mongo中操作一下，然后在转化成对应的phpmongo中一个{}或者[],写在php中就是一个array（）","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"使用mongoDB（二）——CI中用mongo实现增删改查","date":"2017-07-17T14:55:12.000Z","path":"2017/07/17/使用mongoDB（二）——CI中用mongo实现增删改查/","text":"安装好环境之后就要使用mongodb，先从简单的增删改查开始~ tips：用前人写好的类库会节省不少时间！ http://intekhab.in/mongodb-library-for-codeigniter.html 连接mongodb已经写好了，只需要配置就好了需要的增删改查里面都有，而且都贴心的附上了小栗子 安装方法1.将 mongodb.php 放到config目录。2.将 Mongo_db.php 放到library目录。 使用方法1.首先在controller控制器中引入mongodb.php1$this-&gt;load-&gt;library(&apos;Mongo_db&apos;); 2.在models中使用举个栗子：↓↓↓123456789$order_by = [&apos;id&apos; =&gt; -1];$where = [&apos;status&apos; =&gt; 1];$res = $this-&gt;mongo_db -&gt;select($fields) -&gt;order_by($order_by) -&gt;limit(21) -&gt;where_between(&apos;time_stamp&apos;, $start_date, $end_date) -&gt;where($where) -&gt;get(&apos;table_name&apos;); 其他有时候类库并没有我们需要的函数，比如聚合，我们就需要自己写这时候我们就不能继续用$res = $this-&gt;mongo_db我们就要自己新连接数据库然后在进行相应的操作 连接1234567$conn = new MongoClient(); #默认本地的连接$conn = new MongoClient(&quot;mongodb://服务器地址:27017&quot;); #其他链接，默认端口号是27017$db = $conn-&gt;db; #选择名为db的数据库$db=$conn-&gt;selectDB(&quot;mydb&quot;); #第二种写法$collection = $db-&gt;collection #选择一个数据库表（集合）$collection=$db-&gt;selectCollection(&apos;column&apos;); #第二种写法$collection=$conn-&gt;mydb-&gt;column; #更简洁的写法 查询123$data = $collection-&gt;find(array(&apos;name&apos;=&gt;&apos;goudan&apos;,&apos;ip&apos;=&gt;&apos;192.168.1.1&apos;));$data = $collection-&gt;find(array(&apos;age&apos;=&gt;array(&apos;$gt&apos;=&gt;20,&apos;$lt&apos;=&gt;80)));$data = $collection-&gt;findOne();#查询一条结果 $gt为大于、$gte为大于等于、$lt为小于、$lte为小于等于、$ne为不等于、$exists不存在； 查询结果处理查询结果返回的是MongoCursor，是mongo的游标，一般使用foreach即可读取里面的数据 12345foreach($data as $key =&gt; $value)&#123; var_dump($key); var_dump($value); ....&#125; 但是我们更习惯使用数组，就可以使用 iterator_to_array() 将游标转换成一个数组。 123$cursor = $collection-&gt;find();$array = iterator_to_array($cursor);这样输出的则是数组类型的。 【注】使用 iterator_to_array() 会让驱动将强制载入所有搜索结果集到内存，所以对超过内存大小的结果集不要这么做 mongodb数据格式 mongodb获取的时间是时间戳格式我们要进行相应的转化 mongodb自带的’_id’是object，也要进行相应的转换 1.日期1234567891011121314151617181920#MongoDate类型格式如下：[timestamp] =&gt; MongoDate Object( [sec] =&gt; 1379495520 #表当前时间 [usec] =&gt; 0 #时间精确到微秒 )#转化时间$timestamp = date(&quot;Y-m-d H:i&quot;, $start-&gt;sec); #start使我们获取到的时间 /*创建MongoDate类型*/$start = new MongoDate($startRaw); #创建MongoDate类型，$startRaw可为时间戳类型#如：$start = new MongoDate(strtotime(&apos;2016-4-7 12:00:00&apos;));$end = new MongoDate(strtotime(&apos;2016-4-8 12:00:00&apos;));/*查询某个时间段内的数据*/$time=$collection-&gt;find(array(&apos;timestamp&apos;=&gt;array(&apos;$gt&apos;=&gt;$start,&apos;$lte&apos;=&gt;$end))) /*查询一星期内的数据*/$lastweek = new MongoDate(strtotime(&apos;-1 week&apos;)); $data = $collection-&gt;find(array(&apos;timestamp&apos; =&gt; array(&apos;$gt&apos; =&gt; $lastweek))); 2.id 12345678/*使用下面的方法来匹配&#123;&quot;_id&quot;:ObjectId(&quot;56df8bbed7bc8d047cc7dfa7&quot;)&#125;查询、更新也一样$id = new MongoId(&quot;56df8bbed7bc8d047cc7dfa7&quot;);$data = $collection-&gt;find(array(&apos;_id&apos;=&gt;(object)$id));或者$data = $collection-&gt;find(array(&apos;_id&apos;=&gt;$id)); 删除12$collection-&gt;remove(array(&quot;title&quot;=&gt;&quot;MongoDB 教程&quot;), array(&quot;justOne&quot; =&gt; true));//remove中的代表的是筛选条件 修改123456$m = new MongoClient(); // 连接到mongodb$db = $m-&gt;test; // 选择一个数据库$collection = $db-&gt;testcollection; // 选择集合// 更新文档$collection-&gt;update(array(&quot;title&quot;=&gt;&quot;MongoDB&quot;), array(&apos;$set&apos;=&gt;array(&quot;title&quot;=&gt;&quot;MongoDB 教程&quot;)));//在update里的第一个选项代表筛选&apos;title&apos;为&apos;MongoDB&apos;的数据 将‘title‘更新为’MongoDB教程‘； 添加123456789$m = new MongoClient(); // 连接到mongodb$db = $m-&gt;test; // 选择一个数据库$collection = $db-&gt;testcollection; // 选择集合$document = array( &quot;title&quot; =&gt; &quot;MongoDB&quot;, &quot;description&quot; =&gt; &quot;database&quot;);$collection-&gt;insert($document);echo &quot;数据插入成功&quot;;；","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"},{"name":"CI","slug":"CI","permalink":"http://yoursite.com/tags/CI/"}]},{"title":"使用mongoDB（一）——准备工作","date":"2017-07-17T14:41:09.000Z","path":"2017/07/17/使用mongoDB（一）——准备工作/","text":"啊！！！生活不只有眼前的mysql，还有mongodb和远方……φ(&gt;ω&lt;*)这次需要从mongoDB中读取数据，那就重头开始学ㄟ( ▔, ▔ )ㄏ Windows安装mongoDB下载安装根据你的系统下载 32 位或 64 位的 .msi 文件，下载后双击该文件，按操作提示安装即可。 配置安装配置存放日志和数据的目录 添加MongoDB到Windows Service我们当我们把运行MongoDB服务器的dos命令界面关掉，这样我们就不能链接MongoDB，我们需要像MySQL那样，添加到Windows Service，然后在命令行上启动服务和关闭服务，这样方便我们操作和管理服务。使他开机自启 友情链接【学习MongoDB 一：MongoDB入门（安装与配置）】http://blog.csdn.net/congcong68/article/details/44277469 安装mongo客户端安装好了mongoDB的客户端仅仅只能用命令行展示数据，要用一个好用的客户端来展示数据方便操作~我用的robomongo 安装php mongodb扩展查看php型号你需要知道自己的php是什么样型号，在phpinfo()中查看 我的是php 5.6.25,64位，线性安全的 下载扩展然后我们到mongo扩展下载页面看http://pecl.php.net/package/mongo 然后下载对应的版本 复制php_mongo.dll到相应文件夹下载好以后解压文件 然后把php_mongo.dll这个文件导入到“wamp\\bin\\php\\php5.6.25\\ext”这个路径的文件夹下面注意！！！ 这里一定要放到../ext 这个文件夹下面！！！！！放错了就不好使！！！！ 修改php.ini然后打开并修改php配置文件 php.ini wamp在“wamp64\\bin\\php\\php5.6.25”中找php.ini在“wamp64\\bin\\apache\\apache2.4.23\\bin”中找php.ini添加以下配置：【我在php还有apache下面都修改了这个php.ini】 最好找到“extension=……”这个大部队在后面添加这句话 xampp在控制面板中点击Apache的config，选择php.ini添加以下配置：【我在php还有apache下面都修改了这个php.ini】 最好找到“extension=……”这个大部队在后面添加这句话 1extension=php_mongo.dll 查看安装成功与否最后一步！！！！重启WAMP或者XAMPP，然后进phpinfo()里面查看！你就神奇的发现！！！大功告成了！！！٩(๑&gt;◡&lt;๑)۶ 友情链接【php mongodb扩展安装】http://syean.cn/2016/04/06/php-mongodb%E6%89%A9%E5%B1%95%E5%AE%89%E8%A3%85/【MongoDBPHP 扩展】http://www.jianshu.com/p/2c53e201ba84","tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://yoursite.com/tags/mongodb/"}]},{"title":"模板使用心得","date":"2017-03-10T08:05:23.000Z","path":"2017/03/10/模板使用心得/","text":"在CI框架中，利用one ui模板自己搭建一个自己想要的界面。o(*≧▽≦)ツ期间我遇见很多问题，ಥ_ಥ 马克一下我自己翻越的小山和摔过的坑。 侧边栏问题1.侧边栏高亮问题 解决办法 ：在inc文件下的config.php文件里面 12$one-&gt;main_nav_active = get_basename($_SERVER[&apos;PHP_SELF&apos;]);// var_dump($one-&gt;main_nav_active); var_dump看$one-&gt;main_nav_active出来是什么然后在对应的url上添加一个urlc 123456array( &apos;name&apos; =&gt; &apos;&lt;span class=&quot;sidebar-mini-hide&quot;&gt;用户列表&lt;/span&gt;&apos;, &apos;icon&apos; =&gt; &apos;fa fa-list&apos;, &apos;urlc&apos; =&gt; &apos;userlist_weibo&apos;, &apos;url&apos; =&gt; &apos;/weibo/userlist_weibo&apos;), 最后改变在inc文件下的views文件夹里面的Template.php文件里面的 1$link_active = $link_urlc == $this-&gt;main_nav_active ? true : false; 2.不同用户看到的侧边栏不同 解决办法 ：在inc文件下的config.php文件里面 ，创建多个Menu 然后修改inc文件下的class文件夹里面的Template.php文件里面的build_nav函数12345678910111213141516171819202122232425/** * Builds main navigation * * @param boolean $print True to print the navigation and False to return it * * @return string Returns the navigation if $print is set to false */public function build_nav($print = true) &#123; // Build navigation $role=$_SESSION[&apos;role&apos;]; //echo $_SESSION[&apos;username&apos;]; if($role==&quot;admin&quot;)&#123; $this-&gt;build_nav_array($this-&gt;main_nav_admin); &#125; if ($role==&quot;common&quot;) &#123; $this-&gt;build_nav_array($this-&gt;main_nav_common); &#125; // Print or return navigation if ($print) &#123; echo $this-&gt;nav_html; &#125; else &#123; return $this-&gt;nav_html; &#125;&#125; 入口文件问题修改默认入口文件，默认情况下是welcome.php 解决办法1.直接修改welcome里面的东西，改成自己想要的。2.修改config文件夹里面的routes.php p.s：在添加了登录页面之后，默认入口文件应该是主页的控制器文件！！！ session过期问题登录系统后短时间退出系统再进不需要登录，如果session过期，则跳转到login界面重新登陆 解决办法在控制器的构造函数里加上if(!$this-&gt;session-&gt;userdata(‘login’)){header(‘location:http://&#39;.base_url().&#39;login&#39;);} 12345678910public function __construct()&#123; parent::__construct(); if(!$this-&gt;session-&gt;userdata(&apos;login&apos;))&#123;header(&apos;location:http://&apos;.base_url().&apos;login&apos;);&#125; $this-&gt;load-&gt;library(&apos;Mongo_db&apos;); $this-&gt;load-&gt;library(&apos;pagination&apos;); $this-&gt;load-&gt;library(&apos;MY_Pagination&apos;); $this-&gt;load-&gt;model(&apos;twitter/userpage_twitter_m&apos;);&#125; 路径问题缺少js,css 仔细检查资源文件，看看路径哪错了 加/,从项目根目录出发 不加/,从当前目录出发 数据库问题 配置application文件夹里面的config.php文件夹里面的autoload.php 对$autoload[‘libraries’] 1$autoload[&apos;libraries&apos;] = array(&apos;database&apos;, &apos;session&apos;);","tags":[{"name":"CI框架","slug":"CI框架","permalink":"http://yoursite.com/tags/CI框架/"}]},{"title":"vue学习笔记（一）","date":"2017-03-02T11:40:41.000Z","path":"2017/03/02/vue学习笔记（一）/","text":"Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的渐进式框架。 Vue是一个mvvm框架(库)。指令以v-xxx为结构一段html代码 加一个json 再new出一个vue实例 vue的雏形要求：展示一条数据html： &lt;div id=&quot;box&quot;&gt; &lt;/div&gt; js：123456789101112131415 var c = new Vue(&#123; //new出Vue额对象 el:'#box', //选择器，和jquery一样 data:&#123; //data里可以放字符串，json ，数组， 布尔，数字 msg:'document' , //要展示的数据内容 num:12, bool:true, myData:[], ....... &#125;， methods:&#123; get()&#123; //get方法 &#125; &#125;&#125;); 注意： 这里的c是可以任意起名的，也可以不写，不写的话就是this。想要拿到里面的num的值，可以这样 this.data.num vue常用指令1.v-model一般放在表单元素上(input) –&gt; 双向数据绑定123&lt;div id=\"box\"&gt; &lt;input type=\"text\" v-model=\"msg\" /&gt;&lt;/div&gt; 2.v-for 循环数组新数组语法 value in arr (value, index) in arr新对象语法 value in obj (value, key) in obj (value, key, index) in obj 3.v-on:click=”函数” 事件v-on:click/mouseout/mouseover/dblclick/mousedown….. v-on:click=”show()” 一般是这样 @click=”show()” 这是简写 建议用1234methods:&#123; //事件放到methods里 事件名:function()&#123; //可以直接写成 事件名 ()&#123;&#125; alert(1); &#125; 事件对象：$event定死的，必须有$@click(show($event)) 123456methods:&#123; show:function(ev,n)&#123; alert(ev.clientX); alert(n);//n也可以拿到 &#125;&#125; 键盘事件：@keydown $event ev.keyCode@keyup 常用键: 回车 a). @keyup.13 b). @keyup.enter 上、下、左、右 @keyup/keydown.left @keyup/keydown.right @keyup/keydown.up @keyup/keydown.down v-show 显示/隐藏v-show=’true/false’; true是显示 false是隐藏 v-bind 属性v-bind:src=”” width/height/title….1&lt;img :src=\"url\" id=\"img\" :width='a'/&gt; 特殊属性:class&amp;style :class=”” v-bind:class=”” :style=”” v-bind:style=”” class :class=[red,blue] //对应的是数据 1234data&#123; red:'red', blue'blue'&#125; :class=”{red:a,blue:b}” //对应的是 类名和数据 1234data&#123; a:true, b:false&#125; ：clsss=”json”; //也可以吧json直接写到数据里，看起来更舒服-推荐 123456data&#123; json:&#123; red:true, blue:false &#125;&#125; style :styel=[c,d];/.每一个样式都是一条jsondata:{ c:{color:'red'}, d:{backgroundColor:'blue'}//复合样式用驼峰命名法 } :style={json};data:{ json{ color:\"red\", background:\"blue\" } } ###","tags":[{"name":"vue","slug":"vue","permalink":"http://yoursite.com/tags/vue/"}]},{"title":"Hexo搭建Github静态博客","date":"2017-02-09T02:21:23.000Z","path":"2017/02/09/hexo搭建博客/","text":"hexo是一款基于Node.js的静态博客框架 (●°u°●)​ 」这是一篇小白教程Hexo搭建Github静态博客。 1.安装准备工作1.1 安装Git1.2 安装node.js下载：http://nodejs.org/download/可以下载 node-v0.10.33-x64.msi安装时直接保持默认配置即可。下载完成后可以同时按下Win键和R键打开运行窗口,输入”cmd,然后输入以下命令123git --versionnode -vnpm -v 我们要用到npm，但是npm可能很慢，可以安装npm的镜像，cnpm。安装好以后所有的npm命令都可以把npm换成cnpmcnpm 安装代码：1$ npm install -g cnpm --registry=https://registry.npm.taobao.org 2.配置Github2.1 建立Repository建立与你用户名对应的仓库,仓库名必须为[your_user_name.github.io] 2.2 配置SSH-Key详情见网上的教程 3.安装Hexo关于Hexo的安装配置过程,请以官方给出的步骤为准。 3.1 Installation随便找个地方(我是桌面)右键打开Git Bash打开Git命令行,执行如下命令1$ npm install -g hexo-cli 3.2 Setup一旦Hexo安装好了,我们选择一个地方来传建项目:),新建文件夹(我取名叫blog),在这个文件夹里右键打开Git Bash执行如下命令1$ hexo init Hexo随后会自动在目标文件夹建立网站所需要的文件。然后按照提示，运行 npm install1npm install 会在你选择的路径中安装 node_modules。 3.3 Start the server接着运行下面的命令1$ hexo server 然后在浏览器中打开 http://localhost:4000/这时可以看到Hexo已为你生成了一篇blog。你可以按Ctrl+C 停止Server。 3.4 Create a new post在博客文件夹里新打开一个git bash命令行窗口，执行下面的命令1$ hexo new \"My New Post\" //\"My New Post\"是新文章的名字 刷新http://localhost:4000/，可以发现已生成了一篇新文章 “My New Post”。 3.5 Generate static files执行下面的命令，将markdown文件生成静态网页。1$ hexo generate //简写为$ hexo g 该命令执行完后，会在 博客目录\\public\\ 目录下生成一系列html，css等文件。 3.6 编辑文章hexo new “My New Post”会在 博客目录\\source_posts目录下生成一个markdown文件：My-New-Post.md可以使用一个支持markdown语法的编辑器（比如 Sublime Text 2）来编辑该文件。 3.7 部署到Github首先安装hexo-deployer-git.1$ npm install hexo-deployer-git --save 接着配置博客文件下的_config.yml文件，首先找到下面的内容修改123456# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: github repository: git@github.com:Github名称/仓库名.github.io.git branch: master 3.8 成功啦ʕ •ᴥ•ʔ每次部署的步骤，可按以下三步来进行。123$ hexo clean$ hexo generate$ hexo deploy 基本可以简化为1$ hexo d -g 4.配置4.1安装主题Hexo提供了很多主题，详见https://www.zhihu.com/ question/24422335 选择自己喜欢的主题，这里我选择了litten/hexo-theme-yilia。(￣(工)￣)使用Hexo更换主题还算方便，先使用克隆命令安装好主题，然后更改一下博客的配置文件_config.yml里面的主题名称就好了。1.在博客目录下右键点击Git Bash，输入以下命令。1$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载好的主题都在这里：修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 Attention:插入图片最好用网络图片∠( ᐛ 」∠)＿ 先把图片上传到贴图库，然后复制Markdown就可以啦！ 到这里基本就大功告成了！！U^ェ^U，现在就是学习Markdown语句就可以写一篇自己的博客了 友情链接：网上写的比较好的两篇教程http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html#写博客http://www.cnblogs.com/zhcncn/p/4097881.html","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]